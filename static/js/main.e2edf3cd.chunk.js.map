{"version":3,"sources":["components/NavBar.jsx","layouts/MainLayout.jsx","components/Modal.jsx","components/MailChimpModal.jsx","components/LandingPage.jsx","components/ThankYouPage.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","MainLayout","clsName","children","Modal","show","onClose","onClick","e","stopPropagation","MailChimpModal","id","action","method","name","noValidate","htmlFor","type","defaultValue","style","display","position","left","aria-hidden","tabIndex","LandingPage","useState","showModal","setShowModal","ThankYouPage","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2edf3cd.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default function NavBar() {\n  return (\n    <div className=\"NavBar\">\n      <div className=\"container row\">\n        <Link to=\"/\">\n          <div className=\"NavBar-logo\">\n            <span className=\"text-green\">GROUND UP</span>\n            &nbsp;\n            <span className=\"text-yellow\">DEV</span>\n          </div>\n        </Link>\n        <div className=\"NavBar-notice\">\n          Early Access\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport NavBar from '../components/NavBar';\n\nexport default function MainLayout({ clsName = '', children }) {\n  return (\n    <div className={`MainLayout col ${clsName}`}>\n      <NavBar />\n      { children }\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function Modal({ show, onClose, children }) {\n  return (\n    <div className={`Modal ${show ? 'open' : ''}`} onClick={onClose}>\n      <div className=\"Modal-content\" onClick={e => e.stopPropagation()}>\n      { children }\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Modal from './Modal.jsx';\n\nexport default function MailChimpModal({ show, onClose }) {\n  return (\n    <Modal show={show} onClose={onClose}>\n      <div id=\"mc_embed_signup\">\n        <form action=\"https://dev.us17.list-manage.com/subscribe/post?u=98ea3afa12eb28e1ad4815389&amp;id=abd17d478b\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" className=\"validate\" noValidate>\n          <div id=\"mc_embed_signup_scroll\">\n            <h2>Subscribe to the Ground Up Dev newsletter for announcements, exclusive offers and more! </h2>\n            <p className=\"early-access\">Early Access members get special insider benefits, including FREE access to all course materials and resources!</p>\n            <div className=\"mc-field-group\">\n              <label htmlFor=\"mce-FNAME\">First Name </label>\n              <input type=\"text\" defaultValue=\"\" name=\"FNAME\" className=\"\" id=\"mce-FNAME\" />\n            </div>\n            <div className=\"mc-field-group\">\n              <label htmlFor=\"mce-EMAIL\">Email Address </label>\n              <input type=\"email\" defaultValue=\"\" name=\"EMAIL\" className=\"required email\" id=\"mce-EMAIL\" />\n            </div>\n            <div id=\"mce-responses\" className=\"clear\">\n              <div className=\"response\" id=\"mce-error-response\" style={{ display: \"none\" }}/>\n              <div className=\"response\" id=\"mce-success-response\" style={{ display: \"none\" }}/>\n            </div> {/* real people should not fill this in and expect good things - do not remove this or risk form bot signups */}\n            <div style={{ position: \"absolute\", left: \"-5000px\" }} aria-hidden=\"true\">\n              <input type=\"text\" name=\"b_98ea3afa12eb28e1ad4815389_abd17d478b\" tabIndex=\"-1\" defaultValue=\"\"/>\n            </div>\n            <div className=\"clear\">\n              <input type=\"submit\" defaultValue=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" className=\"button\"/>\n            </div>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}\n","import React, { useState } from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport MailChimpModal from './MailChimpModal';\n\nexport default function LandingPage({ children }) {\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <MainLayout>\n      <header className=\"LandingPage-header\">\n        <div className=\"darken-cover\"></div>\n        <div className=\"container\">\n          <div className=\"hero-section col\">\n            <p className=\"hero-text\">The fastest path to a career in web development</p>\n            <button className=\"cta\" onClick={() => setShowModal(true)}>\n              Sign Up <span className=\"extra-text\">for Early Access</span> &gt;\n            </button>\n          </div>\n        </div>\n      </header>\n      <MailChimpModal show={showModal} onClose={() => setShowModal(false)}/>\n    </MainLayout>\n  );\n}\n","import React from 'react';\nimport MainLayout from '../layouts/MainLayout';\nimport { Link } from 'react-router-dom';\n\nexport default function ThankYouPage() {\n  return (\n    <MainLayout clsName=\"ThankYouPage\">\n      <div className=\"fill center\">\n        <div className=\"card col center mt-10\">\n          <h1>Thank You for joining the Ground Up Dev community!</h1>\n          <p>Check your inbox for a welcome message.</p>\n          <p>\n            <Link to=\"/\">Back to Home</Link>\n          </p>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport LandingPage from './components/LandingPage';\nimport ThankYouPage from './components/ThankYouPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <LandingPage />\n        </Route>\n        <Route path=\"/thankyou\">\n          <ThankYouPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}